//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

namespace BDAnimationModules
{
	public class BDTextureSwitch : PartModule
	{
		[KSPField]
		public string objectNames;

		[KSPField]
		public string textureRootFolder;

		[KSPField]
		public string textureNames;

		[KSPField]
		public string textureDisplayNames;

		[KSPField]
		public string statusText;

		[KSPField]
		public string nextButtonText;

		[KSPField]
		public bool switchableInFlight;

		[KSPField(isPersistant = true)]
		public int textureIndex = 0;

		[KSPField]
		public int moduleID = 0;
		
		Texture2D[] textures;
		string[] displayNames;
		MeshRenderer[] renderers;


		[KSPField(guiActiveEditor = true)]
		public string displayLabel;

		[KSPEvent(guiActive = false, guiActiveEditor = true, guiName = "Next Texture")]
		public void NextTexture()
		{
			textureIndex++;

			if(textureIndex >= textures.Length)
			{
				textureIndex = 0;
			}

			foreach(var pSym in part.symmetryCounterparts)
			{
				if(pSym!=part)
				{
					foreach(var bdts in pSym.FindModulesImplementing<BDTextureSwitch>())
					{
						if(bdts.moduleID == moduleID)
						{
							bdts.ApplyTexture(textureIndex);
						}
					}
				}
			}

			ApplyTexture(textureIndex);
		}

		void Start()
		{
			SetupArrays();
			SetupButton();
			ApplyTexture(textureIndex);
		}

		void SetupArrays()
		{
			string[] objNames = objectNames.Split(';');
			
			List<MeshRenderer> renderList = new List<MeshRenderer>();
			for(int o = 0; o < objNames.Length; o++)
			{
				if(part.FindModelTransform(objNames[o]) && part.FindModelTransform(objNames[o]).GetComponent<MeshRenderer>())
				{
					renderList.Add(part.FindModelTransform(objNames[o]).GetComponent<MeshRenderer>());
				}
			}
			renderers = renderList.ToArray();

			string[] texNames = textureNames.Split(';');
			List<Texture2D> textureList = new List<Texture2D>();
			for(int i = 0; i < texNames.Length; i++)
			{
				textureList.Add(GameDatabase.Instance.GetTexture(textureRootFolder + texNames[i], false));
			}
			textures = textureList.ToArray();

			displayNames = textureDisplayNames.Split(';');
		}

		void SetupButton()
		{
			Events["NextTexture"].guiName = nextButtonText;
			if(switchableInFlight)
			{
				Events["NextTexture"].guiActive = true;
			}
			else
			{
				Events["NextTexture"].guiActive = false;
			}
		}

		void ApplyTexture(int index)
		{
			for(int i = 0; i < renderers.Length; i++)
			{
				renderers[i].material.mainTexture = textures[index];
			}
			Fields["displayLabel"].guiName = statusText;
			displayLabel = displayNames[index];

			textureIndex = index;
		}

	}
}

